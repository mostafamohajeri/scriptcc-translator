group code;

header() ::= <<
import _root_.scala.collection.mutable.HashMap

import _root_.akka.actor.typed.{ActorRef, Behavior, SupervisorStrategy}
import _root_.akka.actor.typed.scaladsl.{ActorContext, Behaviors, Routers}
import _root_.it.unibo.tuprolog.core.{Atom, Numeric, Struct, Term, Truth}

import _root_.scala.util.Failure
import _root_.scala.util.Success
import _root_.akka.util.Timeout
import _root_.scala.concurrent.duration._
import _root_.akka.actor.typed.scaladsl.AskPattern._

import _root_.scala.concurrent.{Await, Future}
import _root_.scala.jdk.CollectionConverters._
import std.coms._
import scala.util.Random
import bb._
import infrastructure._
import infrastructure.termutils.ExTermFactoryKT._
import infrastructure.termutils.ExTermVisitorKT._

>>

intention(goalPlans,class_name) ::= <<

object Intention {

      def apply(p_executionContext: ExecutionContext): Behavior[ISubGoalMessage] = Behaviors.setup { context =>


        Behaviors.receive {
        (context, message) =>

        implicit val executionContext = p_executionContext.copy(intention = context,sender = Sender(message.c_sender_name,message.c_sender))

        message match {
           case SubGoalMessage(_,_,_,r) =>
              message.goal match {

        < goalPlans :  { goalPlan |
      case <class_name>.<goalPlan.goal.atom.name> =>
           <class_name>.<goalPlan.goal.atom.name>.execute(message.params.asInstanceOf[<class_name>.<goalPlan.goal.atom.name>.Parameters])

         } >
      case _ =>
          context.log.error("This actor can not handle goal of type {}", message.goal)
        }
          r ! IntentionDoneMessage(Option(executionContext.name),Option(executionContext.agent.self))
                        Behaviors.same
        case InitEndMessage(s,r) =>
            //r ! message
            Behaviors.stopped
      }
     }
    }
    }

>>


agent(class_name,initialGoals,initialBeliefs,goalPlans) ::= <<
object Agent extends IAgent {

        override def agent_type: String = "<class_name>"

        def initGoals()(implicit executionContext: ExecutionContext) = List[(IGoal,IParams)](
          < initialGoals : { initialGoal |
          (<initialGoal.goal.literal.atom.name>,<initialGoal.goal.literal.atom.name>.Parameters(List( <initialGoal.goal.literal.terms : { term | <term.refName> }; separator=", ">)))}; separator=",\n ">
        )

        def initBeliefs()(implicit executionContext: ExecutionContext) = List[Struct](
          < initialBeliefs : { ib |
          <ib.literal.refName>
          }; separator=",\n " >
        )

        def apply(name: String,yellowPages: ActorRef[IMessage],MAS: ActorRef[IMessage]): Behavior[IMessage] = {
              Behaviors.setup { context =>
                val yp : ActorRef[IMessage] = yellowPages
                val bb : BeliefBaseKT = BeliefBaseFactory()
                val logger = AgentLogger()
                implicit val executionContext : ExecutionContext = ExecutionContext(name,agent_type,context,yp,bb,logger)
                bb.assert(initBeliefs)

                val initiator = context.spawn(Intention(executionContext),"initiator")

                MAS ! ReadyMessage(context.self)
                Behaviors.receive {
                  (context, message) => message match {
                    case StartMessage() =>
                      logger.start()

              implicit val timeout: Timeout = 20.seconds
                            implicit val ec = context.executionContext
                            implicit val scheduler = context.system.scheduler


              //              initGoals.foreach( tuple => initiator ! SubGoalMessage(tuple._1,tuple._2,name,context.self))
                            initGoals.foreach(tuple => {

                              val result: Future[IMessage] =  initiator.ask[IMessage](ref => SubGoalMessage(tuple._1, tuple._2, name, ref))

                              result.onComplete {
                                case Success(IntentionDoneMessage(n, r)) => context.log.debug(f"$name: inital intention done")
                                case Failure(_) => context.log.error(f"$name: inital error")
                              }

                              Await.result(result,timeout.duration)

              //                context.ask[ISubGoalMessage, IMessage](initiator, ref => SubGoalMessage(tuple._1, tuple._2, name, ref)) {
              //                  case Success(IntentionDoneMessage(_, _)) => IntentionDoneMessage()
              //                  case Failure(_) => IntentionErrorMessage()
              //                }
                            }
                            )

              initiator ! InitEndMessage(name,context.self)
              context.log.debug(f"$name: I have started, switching behavior")
              normal_behavior()

//            case InitEndMessage(_,_) =>
//              context.log.debug(f"$name: I have started, switching behavior")
//              normal_behavior()
                  }

                }
              }
            }

        def normal_behavior() (implicit executionContext: ExecutionContext): Behavior[IMessage] = {
              Behaviors.setup { context =>

                val pool = Routers.pool(poolSize = 8)(
                  Behaviors.supervise(Intention(executionContext)).onFailure[Exception](SupervisorStrategy.restart))

                val router = context.spawn(pool, "intention-pool")

                Behaviors.receive {
                  (context, message) => message match {
                    case IntentionDoneMessage(s,r) =>
                      context.log.debug(f"${executionContext.name}: an intention was done by $s")
                    case SubGoalMessage(_, _, _,_) =>
                      router ! message.asInstanceOf[SubGoalMessage]
                    case GoalMessage(m,r,ref) =>
                      m match {
                        case t: Struct =>
                          < goalPlans :  { goalPlan | if(t.getFunctor=="<goalPlan.goal.atom.name>" && t.getArity == <goalPlan.arity> ) {
                               val args : <goalPlan.goal.atom.name>.Parameters = if(t.getArity== 0)  <goalPlan.goal.atom.name>.Parameters(List( )) else <goalPlan.goal.atom.name>.Parameters(t.getArgs.toList)
                               context.self ! SubGoalMessage(<goalPlan.goal.atom.name>, args,r,ref)
                           \} else }> if(true) { println("no plan for this goal") }
                         }
                  }
                    Behaviors.same
                }
              }
            }
    }
>>

goal_plans(class_name,goalPlans) ::= <<

<goalPlans : { goalPlan |
     object <goalPlan.goal.atom.name> extends IGoal {
        case class Parameters(l_params: List[Term]) extends IParams {\}

       def execute(params: Parameters) (implicit executionContext: ExecutionContext) : Unit = {
        <goalPlan.goal.terms : { term | //var <term.name> = params.l_params(<i0>)  }; separator="\n">
        var vars = new HashMap[String,Term]
        <goalPlan.plans : { plan |
        //plan <i0>

                vars.clear()
                <if(plan.literal.terms)>
                vars +=( <plan.literal.terms : { term | <if(term.is_var)>"<term.name>" -> params.l_params(<i0>)<else>"<i0>" -> params.l_params(<i0>)<endif>}; separator=", "> )
               <endif>

                val m<i0> = executionContext.beliefBase.matchTerms(<plan.headCheck>);

               if(m<i0>.result)
                {
                m<i0>.bindings foreach { case (k, v) => vars += (k -> v) \}

                val r<i0> = executionContext.beliefBase.query(<plan.expression.st4>)

                if (r<i0>.result) {
                    r<i0>.bindings foreach { case (k, v) => vars += (k -> v) \}
                    plan<i0>(vars)
                    return
                \}

                 \} } >

       \}


        < goalPlan.plans : { plan |
             def plan<i0>(vars: HashMap[String,Term])(implicit executionContext: ExecutionContext): Unit = {

             <code_block(plan.planDefinition.steps)>

            \}
        } >

     \}

     }>
>>


code_block(steps) ::= <<
<steps : { step |
                <if(step.achieve)>
                    <step.writableName>.execute(<step.writableName>.Parameters(List( <step.writableTerms : { term | <term.refName> } ; separator=", "> )))
                <elseif(step.primitive)>
                    PrimitiveAction.execute(PrimitiveAction.Parameters(() => <step.call>))
                <elseif(step.for_loop)>
                    val ex_<step.iterationVarName> = executionContext.beliefBase.query( <step.query> )
                    if (ex_<step.iterationVarName>.result) {
                    if (ex_<step.iterationVarName>.bindings.contains("<step.iterationVarName>")) {
                            val it_<step.iterationVarName> : Seq[Struct] = visitTermList(ex_<step.iterationVarName>.bindings("<step.iterationVarName>"))
                            for (item_<step.iterationVarName> \<- it_<step.iterationVarName>) {
                                  vars += ("<step.varName>" -> item_<step.iterationVarName>)
                                  <code_block(step.steps)>
                            \}
                        \}
                        vars -= ("<step.varName>")
                    \}
                <elseif(step.for_loop_simple)>
                         val ex_<step.iterationVarName> = executionContext.beliefBase.rawQuery( <step.querySimple> )
                         while (ex_<step.iterationVarName>.hasNext) {
                             val sol_<step.iterationVarName> = ex_<step.iterationVarName>.next
                             if(sol_<step.iterationVarName>.isYes) {
                             vars += ("<step.varName>" -> sol_<step.iterationVarName><step.subs>)
                             <code_block(step.steps)>
                             \}
                         \}
                     vars -= ("<step.varName>")
                <elseif(step.assign)>
                     <step.call>
                <elseif(step.belief_action)>
                     BeliefUpdateAction.execute(BeliefUpdateAction.Parameters(<step.operator>, <step.literal.refName>))
                <endif>
                } >
>>

footer() ::= <<

   def myName() (implicit executionContext: ExecutionContext) : String = executionContext.name

>>

agentdef(class_name,initialGoals,initialBeliefs,goalPlans) ::= <<
 <header()>
 object <class_name> {
 <intention(goalPlans,class_name)>
 <agent(class_name,initialGoals,initialBeliefs,goalPlans)>
 <goal_plans(class_name,goalPlans)>
 <footer()>
 }
>>