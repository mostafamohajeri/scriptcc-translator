group code;

header() ::= <<
import scala.collection.mutable
import java.util
import alice.tuprolog.presentation.TermUtils
import akka.actor.typed.{ActorRef, Behavior}
import akka.actor.typed.receptionist.{Receptionist, ServiceKey}
import akka.actor.typed.scaladsl.{ActorContext, Behaviors}
import alice.tuprolog.{Term,Struct,Number}
import scala.util.Random
>>

intention(goalPlans,class_name) ::= <<

object Intention {

      def apply(executionContext: ExecutionContext): Behavior[IGoalMessage] = Behaviors.setup { context =>

        implicit val l_executionContext = executionContext.copy(intention = context)
        Behaviors.receive {
        (context, message) => message.goal match {

        < goalPlans :  { goalPlan |
      case <class_name>.<goalPlan.goal.atom.name> =>
           <class_name>.<goalPlan.goal.atom.name>.execute(message.params.asInstanceOf[<class_name>.<goalPlan.goal.atom.name>.Parameters])

         } >
      case _ =>
          context.log.error("This actor can not handle goal of type {}", message.goal)
        }
          Behaviors.same
      }
     }
    }

>>


agent(class_name,initialGoals,initialBeliefs,goalPlans) ::= <<
object Agent extends IAgent {

        override def agent_type: String = "<class_name>"

        def initGoals = List[(IGoal,IParams)](
          < initialGoals : { initialGoal |
          (<initialGoal.goal.literal.atom.name>,<initialGoal.goal.literal.atom.name>.Parameters(List( <initialGoal.goal.literal.terms : { term | <term.refName> }; separator=", ">)))}; separator=",\n ">
        )

        def initBeliefs = List[Term](
          < initialBeliefs : { ib |
          <ib.literal.refName>
          }; separator=",\n " >
        )

        def apply(name: String,yellowPages: ActorRef[IMessage],MAS: ActorRef[IMessage]): Behavior[IMessage] = {
              Behaviors.setup { context =>
                val yp : ActorRef[IMessage] = yellowPages
                val bb : BeliefBase = BeliefBaseFactory()
                bb.assert(initBeliefs)
                MAS ! ReadyMessage(context.self)
                Behaviors.receive {
                  (context, message) => message match {
                    case GoalMessage(_, _, _,_) =>
                      context.spawn(Intention(ExecutionContext(name,context,null,yp,bb)), "GOAL_" + Random.nextInt(Int.MaxValue)) ! message.asInstanceOf[GoalMessage]
                    case StartMessage() =>
                      initGoals.foreach( tuple => context.self.tell(GoalMessage(tuple._1,tuple._2,name,context.self)))
                  }
                    Behaviors.same
                }
              }
            }
    }
>>

goal_plans(class_name,goalPlans) ::= <<

<goalPlans : { goalPlan |
     object <goalPlan.goal.atom.name> extends IGoal {
        case class Parameters(l_params: List[Any]) extends IParams {\}

       def execute(params: Parameters) (implicit executionContext: ExecutionContext) : Unit = {
        <goalPlan.goal.terms : { term | var <term.name> = params.l_params(<i0>)  }; separator="\n">
        var vars = new mutable.HashMap[String,Any]
        <goalPlan.plans : { plan |
        //plan <i0>
                vars.clear()
                <if(plan.literal.terms)>
                vars +=( <plan.literal.terms : { term | "<term.name>" -> params.l_params(<i0>)}; separator=", "> )
                <endif>
                val r<i0> = executionContext.beliefBase.query(<plan.expression.st4>)

                if (r<i0>.result) {
                    r<i0>.bindings foreach { case (k, v) => vars += (k -> v) \}
                    plan<i0>(vars)
                    return
                \}
                } >
       \}


        < goalPlan.plans : { plan |
             def plan<i0>(vars: mutable.HashMap[String,Any])(implicit executionContext: ExecutionContext): Unit = {

             <code_block(plan.planDefinition.steps)>

            \}
        } >

     \}

     }>
>>


code_block(steps) ::= <<
<steps : { step |
                <if(step.achieve)>
                    <step.writableName>.execute(<step.writableName>.Parameters(List( <step.writableTerms : { term | <term.refName> } ; separator=", "> )))
                <elseif(step.primitive)>
                    PrimitiveAction.execute(PrimitiveAction.Parameters(() => <step.call>))
                <elseif(step.for_loop)>
                    val ex_<step.iterationVarName> = executionContext.beliefBase.query( <step.query> )
                    if (ex_<step.iterationVarName>.result) {
                        val it_<step.iterationVarName> : util.Iterator[Any] = ex_<step.iterationVarName>.bindings("<step.iterationVarName>").asInstanceOf[util.ArrayList[Any]].iterator();
                        while (it_<step.iterationVarName>.hasNext) {
                              vars += ("<step.varName>" -> it_<step.iterationVarName>.next)
                              <code_block(step.steps)>
                        \}
                        vars -= ("<step.varName>")
                    \}
                <elseif(step.belief_action)>
                     BeliefUpdateAction.execute(BeliefUpdateAction.Parameters(<step.operator>, <step.literal.refName>))
                <endif>
                } >
>>

footer() ::= <<

  def inform( dest: String,  message:Any) (implicit executionContext: ExecutionContext): Unit = {
    executionContext.yellowPages ! ActorMessage(
      dest.toString.replace("'",""),
      new BeliefMessage(message,executionContext.name,executionContext.agent.self),
      executionContext.name,
      executionContext.agent.self
    )
  }

    object Comparer {
        def compare(lhs: AnyVal,rhs: AnyVal, operator: String) : Boolean = true
    }

       def add_and_print(num1 : Any,num2:Any): Unit = {
          println(" sum of " + num1.asInstanceOf[Double] + " and " + num2.asInstanceOf[Double] + " = " )
          println(num1.asInstanceOf[Double] + num2.asInstanceOf[Double])
        }

>>

agentdef(class_name,initialGoals,initialBeliefs,goalPlans) ::= <<
 <header()>
 object <class_name> {
 <intention(goalPlans,class_name)>
 <agent(class_name,initialGoals,initialBeliefs,goalPlans)>
 <goal_plans(class_name,goalPlans)>
 }
>>