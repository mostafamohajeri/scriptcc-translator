group code;

header() ::= <<
import scala.collection.mutable

import akka.actor.typed.{ActorRef, Behavior, SupervisorStrategy}
import akka.actor.typed.scaladsl.{ActorContext, Behaviors, Routers}
import it.unibo.tuprolog.core.{Struct, Term, Numeric, Atom}

import scala.jdk.CollectionConverters._
import std.coms._
import scala.util.Random
import bb._
import infrastructure._
import infrastructure.termutils.ExTermFactoryKT._
import infrastructure.termutils.ExTermVisitorKT._

>>

intention(goalPlans,class_name) ::= <<

object Intention {

     def apply(executionContext: ExecutionContext): Behavior[IMessage] = Behaviors.setup { context =>
      default(executionContext)
    }

      def default(p_executionContext: ExecutionContext): Behavior[IMessage] = Behaviors.setup { context =>

        implicit val executionContext: ExecutionContext = p_executionContext.copy(intention = context)

        Behaviors.receive {
        (context, message) =>
            message match {
              case goal : ISubGoalMessage =>
                goal.goal match {

        < goalPlans :  { goalPlan |
      case <class_name>.<goalPlan.goal.atom.name> =>
           <class_name>.<goalPlan.goal.atom.name>(message.params.asInstanceOf[<class_name>.<goalPlan.goal.atom.name>.Parameters])

         } >
      case _ =>
          context.log.error("This actor can not handle goal of type {}", message.goal)
          Behaviors.same
        }
        }
      }
     }
    }

>>


agent(class_name,initialGoals,initialBeliefs,goalPlans) ::= <<
object Agent extends IAgent {

        override def agent_type: String = "<class_name>"

        def initGoals = List[(IGoal,IParams)](
          < initialGoals : { initialGoal |
          (<initialGoal.goal.literal.atom.name>,<initialGoal.goal.literal.atom.name>.Parameters(List( <initialGoal.goal.literal.terms : { term | <term.refName> }; separator=", ">)))}; separator=",\n ">
        )

        def initBeliefs = List[Struct](
          < initialBeliefs : { ib |
          <ib.literal.refName>
          }; separator=",\n " >
        )

        def apply(name: String,yellowPages: ActorRef[IMessage],MAS: ActorRef[IMessage]): Behavior[IMessage] = {
              Behaviors.setup { context =>
                val yp : ActorRef[IMessage] = yellowPages
                val bb : BeliefBaseKT = BeliefBaseFactory()
                bb.assert(initBeliefs)
                val logger = AgentLogger()

                 val executor_pool = Routers.pool(poolSize = 8)(
                          Behaviors.supervise(ExecutorActor()).onFailure[Exception](SupervisorStrategy.restart))

                        val executor = context.spawn(executor_pool,"executor-pool")


                val executionContext : ExecutionContext = ExecutionContext(name,agent_type,context,null,yp,bb,logger,executor)

                val pool = Routers.pool(poolSize = 8)(
                          Behaviors.supervise(Intention(executionContext)).onFailure[Exception](SupervisorStrategy.restart))

                val router = context.spawn(pool, "intention-pool")

                MAS ! ReadyMessage(context.self)
                Behaviors.receive {
                  (context, message) => message match {
                    case SubGoalMessage(_, _, _,_) =>

                      //              context.spawn(Intention(executionContext), "GOAL_" + Random.nextInt(Int.MaxValue)) ! message.asInstanceOf[SubGoalMessage]
                      //              intentionPool.run_goal(message.asInstanceOf[SubGoalMessage])
                      router ! message.asInstanceOf[SubGoalMessage]
                    case StartMessage() =>
                      logger.start()
                      initGoals.foreach( tuple => context.self.tell(SubGoalMessage(tuple._1,tuple._2,name,context.self)))
                    case GoalMessage(m,r,ref) =>
                       m match {
                         case t: Struct =>
                          < goalPlans :  { goalPlan | if(t.getFunctor=="<goalPlan.goal.atom.name>" && t.getArity == <goalPlan.arity> ) {
                               val args : <goalPlan.goal.atom.name>.Parameters = if(t.getArity== 0)  <goalPlan.goal.atom.name>.Parameters(List( )) else <goalPlan.goal.atom.name>.Parameters(t.getArgs.toList)
                               context.self ! SubGoalMessage(<goalPlan.goal.atom.name>, args,r,ref)
                           \} else }> if(true) { println("no plan for this goal") }
                         }
                  }
                    Behaviors.same
                }
              }
            }
    }
>>

goal_plans(class_name,goalPlans) ::= <<

<goalPlans : { goalPlan |
     object <goalPlan.goal.atom.name> extends IGoal {
        case class Parameters(l_params: List[Term]) extends IParams {\}

       def apply(params: Parameters)(implicit executionContext: ExecutionContext): Behavior[IMessage] = {
        <goalPlan.goal.terms : { term | //var <term.name> = params.l_params(<i0>)  }; separator="\n">
        var vars = new mutable.HashMap[String,Term]
        <goalPlan.plans : { plan |
        //plan <i0>

                vars.clear()
                <if(plan.literal.terms)>
                vars +=( <plan.literal.terms : { term | <if(term.is_var)>"<term.name>" -> params.l_params(<i0>)<else>"<i0>" -> params.l_params(<i0>)<endif>}; separator=", "> )
               <endif>

               if(<plan.headCheck>)
                {


                val r<i0> = executionContext.beliefBase.query(<plan.expression.st4>)

                if (r<i0>.result) {
                    r<i0>.bindings foreach { case (k, v) => vars += (k -> v) \}
                    return plan<i0>(vars)

                \}

                 \} } >

            executionContext.agent.log.debug("wtffff")
                  throw new RuntimeException("wwhat")

       \}


        < goalPlan.plans : { plan |
             def plan<i0>(vars: mutable.HashMap[String,Term])(implicit executionContext: ExecutionContext): Behavior[IMessage] = {

             <code_block(plan.planDefinition.steps)>

            \}
        } >

     \}

     }>
>>


code_block(steps) ::= <<
<steps : { step |
                <if(step.achieve)>
                    <step.writableName>.execute(<step.writableName>.Parameters(List( <step.writableTerms : { term | <term.refName> } ; separator=", "> )))
                <elseif(step.primitive)>
                    PrimitiveAction.execute(PrimitiveAction.Parameters(() => <step.call>))
                <elseif(step.for_loop)>
                    val ex_<step.iterationVarName> = executionContext.beliefBase.query( <step.query> )
                    if (ex_<step.iterationVarName>.result) {
                    if (ex_<step.iterationVarName>.bindings.contains("<step.iterationVarName>")) {
                            val it_<step.iterationVarName> : Seq[Struct] = visitTermList(ex_<step.iterationVarName>.bindings("<step.iterationVarName>"))
                            for (item_<step.iterationVarName> \<- it_<step.iterationVarName>) {
                                  vars += ("<step.varName>" -> item_<step.iterationVarName>)
                                  <code_block(step.steps)>
                            \}
                        \}
                        vars -= ("<step.varName>")
                    \}
                <elseif(step.for_loop_simple)>
                         val ex_<step.iterationVarName> = executionContext.beliefBase.rawQuery( <step.querySimple> )
                         while (ex_<step.iterationVarName>.hasNext) {
                             val sol_<step.iterationVarName> = ex_<step.iterationVarName>.next
                             if(sol_<step.iterationVarName>.isYes) {
                             vars += ("<step.varName>" -> sol_<step.iterationVarName><step.subs>)
                             <code_block(step.steps)>
                             \}
                         \}
                     vars -= ("<step.varName>")
                <elseif(step.belief_action)>
                     BeliefUpdateAction.execute(BeliefUpdateAction.Parameters(<step.operator>, <step.literal.refName>))
                <endif>
                } >
>>

footer() ::= <<

   def myName() (implicit executionContext: ExecutionContext) : String = executionContext.name

>>

agentdef(class_name,initialGoals,initialBeliefs,goalPlans) ::= <<
 <header()>
 object <class_name> {
 <intention(goalPlans,class_name)>
 <agent(class_name,initialGoals,initialBeliefs,goalPlans)>
 <goal_plans(class_name,goalPlans)>
 <footer()>
 }
>>