group code;

header() ::= <<
import _root_.scala.collection.mutable.HashMap

import _root_.akka.actor.typed.{ActorRef, Behavior, SupervisorStrategy}
import _root_.akka.actor.typed.scaladsl.{ActorContext, Behaviors, Routers}
import java.util.logging.Logger
import _root_.scala.util.Failure
import _root_.scala.util.Success
import _root_.akka.util.Timeout
import _root_.scala.concurrent.duration._
import _root_.akka.actor.typed.scaladsl.AskPattern._
import _root_.scala.language.implicitConversions
import _root_.scala.concurrent.{Await, Future}
import _root_.scala.jdk.CollectionConverters._
import std.converters._

import scala.util.Random
import bb._
import infrastructure._
import bb.expstyla.exp._
import std.{AgentCommunicationLayer, DefaultCommunications}

>>

intention(goalPlans,class_name) ::= <<

object Intention {

      def apply(p_executionContext: ExecutionContext): Behavior[ISubGoalMessage] = Behaviors.setup { context =>

        Behaviors.receive {
        (context, message) =>

         implicit val executionContext = p_executionContext.copy(intention = context, src = message.source)

        message match {
           case SubGoalMessage(_,_,r) =>
              message.goal match {

        < goalPlans :  { goalPlan |
          case <class_name>.this.<goalPlan.nameWithArity> =>
            <class_name>.this.<goalPlan.nameWithArity>.execute(message.params.asInstanceOf[Parameters])

         } >
          case _ =>
            context.log.error("This actor can not handle goal of type {}", message.goal)
        }
          r match {
                case a : AkkaMessageSource => 
                  a.src ! IntentionDoneMessage(AkkaMessageSource(executionContext.agent.self))
                case DummyMessageSource(_) => 
                  context.log.error("Intention Done!")
              }
              
              Behaviors.same
            case InitEndMessage(r) =>
              Behaviors.stopped
      }
     }
    }
    }

>>


agent(class_name,initialGoals,initialBeliefs,goalPlans) ::= <<
class Agent extends IAgent {

        override def agent_type: String = "<class_name>"

        var vars = VarMap()

        def initGoals()(implicit executionContext: ExecutionContext) = List[StructTerm](
          < initialGoals : { initialGoal |
          StructTerm("<initialGoal.goal.writableName>",Seq[GenericTerm]( <initialGoal.goal.writableTerms : { expression | <expression.asNative> } ; separator=", "> ))

            }; separator=",\n " >
        )

        def initBeliefs()(implicit executionContext: ExecutionContext) = List[StructTerm](
          < initialBeliefs : { ib |
          <ib.term.asStructure>
          }; separator=",\n " >

        )

        def planApplicabilities()(implicit executionContext: ExecutionContext) = List[StructTerm](

                  <goalPlans : { goalPlan |
                   <goalPlan.plans : { plan |
                    <if(plan.preferenceCheck)>
                         <plan.applicableRule>
                         <endif>
                             } >
                   } >
                )



     def apply(name: String, yellowPages: IYellowPages, MAS: ActorRef[IMessage], parent: IMessageSource): Behavior[IMessage] = {
          Behaviors.setup { context =>
            val yp: IYellowPages = yellowPages
            val bb: IBeliefBase[GenericTerm] = beliefBaseFactory()
            implicit val executionContext: ExecutionContext = ExecutionContext(
                           name = name,
                           agentType = agent_type,
                           agent = context,
                           yellowPages = yp,
                           beliefBase = bb,
                           logger = context.log,
                           goalParser = GoalParser,
                           parent = parent
                         )
            bb.assert(initBeliefs)
            bb.assert(planApplicabilities)

        val initiator = context.spawn(Intention(executionContext), "initiator")

        MAS ! ReadyMessage(context.self)
        Behaviors.receive {
          (context, message) =>
            message match {
              case StartMessage() =>


                implicit val timeout: Timeout = 99999.seconds
                implicit val ec = context.executionContext
                implicit val scheduler = context.system.scheduler


                //              initGoals.foreach( tuple => initiator ! SubGoalMessage(tuple._1,tuple._2,context.self))
                initGoals.foreach(struct => {


                  val result: Future[IMessage] = initiator.ask[IMessage](ref => {
                    val subGoal = GoalParser.create_goal_message(struct, AkkaMessageSource(ref))
                    if (subGoal.isDefined)
                      subGoal.get
                    else
                      throw new RuntimeException(s"No plan for initial goal $struct")
                    }
                  )


                  //result.onComplete {
                  //  case Success(IntentionDoneMessage(r)) => IntentionDoneMessage(r)
                  //  case Failure(_) => IntentionErrorMessage(src = null)
                  //}

                  //Await.result(result, timeout.duration)

                  val res = Await.result(result, timeout.duration)

                  if(!res.isInstanceOf[IntentionDoneMessage]) {
                    throw new RuntimeException(s"Issue with initial goal $struct")
                    context.system.terminate()
                  }

                  //                context.ask[ISubGoalMessage, IMessage](initiator, ref => SubGoalMessage(tuple._1, tuple._2,name, ref)) {
                  //                  case Success(IntentionDoneMessage(_, _)) => IntentionDoneMessage()
                  //                  case Failure(_) => IntentionErrorMessage()
                  //                }
                }
                )

                initiator ! InitEndMessage(context.self)
                normal_behavior(MAS)

              //            case InitEndMessage(_) =>
              //              context.log.debug(f"$name: I have started, switching behavior")
              //              normal_behavior()
            }

        }
      }
    }

    def normal_behavior(MAS: ActorRef[IMessage])(implicit executionContext: ExecutionContext): Behavior[IMessage] = {
      Behaviors.setup { context =>

        val pool = Routers.pool(poolSize = 8)(
          Behaviors.supervise(Intention(executionContext)).onFailure[Exception](SupervisorStrategy.restart))

        val router = context.spawn(pool, "intention-pool")
        //MAS ! ReadyMessage(context.self)
        Behaviors.receive {
          (context, message) =>
            message match {
              case IntentionDoneMessage(s) =>
                context.log.debug(f"${executionContext.name}: an intention was done by $s")
              case IntentionErrorMessage(c,s) =>
                context.log.debug(f"${executionContext.name}: an intention was done by $s: $c")
              case SubGoalMessage(_, _, _) =>
                router ! message.asInstanceOf[SubGoalMessage]
              case GoalMessage(m, ref) =>
                m match {
                  case t: StructTerm =>
                    val subGoal = GoalParser.create_goal_message(t, ref)

                    if (subGoal.isDefined)
                      context.self ! subGoal.get
                    else
                      ref.asInstanceOf[AkkaMessageSource].src ! IntentionErrorMessage(NoPlanMessage(),AkkaMessageSource(executionContext.agent.self))


                }

               case AskMessage(m, ref) =>
                               m match {
                                 case t: StructTerm =>
                                   val subGoal = GoalParser.create_test_message(t, ref)

                                   if (subGoal.isDefined)
                                     context.self ! subGoal.get
                                   else
                                     ref.asInstanceOf[AkkaMessageSource].src ! IntentionErrorMessage(NoPlanMessage(),AkkaMessageSource(executionContext.agent.self))
                               }
            case BeliefMessage(m, ref) =>
                 m match {
                   case t: StructTerm =>
                   if(executionContext.beliefBase.assertOne(t)) {
                     val subGoal = GoalParser.create_belief_message(t, ref)

                     if (subGoal.isDefined)
                       context.self ! subGoal.get
                   }
                 }

             case UnBeliefMessage(m, ref) =>
                  m match {
                    case t: StructTerm =>
                    if(executionContext.beliefBase.retractOne(t)) {
                      val subGoal = GoalParser.create_unbelief_message(t, ref)

                      if (subGoal.isDefined)
                        context.self ! subGoal.get
                    }
                  }
            }
            Behaviors.same
        }
      }
    }
  }



  object GoalParser extends IAgentGoalParser {
       override def create_goal_message(t: StructTerm, ref: IMessageSource) (implicit executionContext: ExecutionContext): Option[SubGoalMessage] = {
                 < goalPlans :  { goalPlan |
                 <if(goalPlan.achievementGoalPlan)>
                 if(t.matchOnlyFunctorAndArity("<goalPlan.goal.atom.name>",<goalPlan.arity>)) {
                   val args: Parameters = Parameters(t.terms.toList)
                   Option(SubGoalMessage(<goalPlan.nameWithArity>, args, ref))
                 \} else <endif> }> {
                   Option.empty[SubGoalMessage]
                   }

               }

       override def create_belief_message(t: StructTerm, ref: IMessageSource) (implicit executionContext: ExecutionContext): Option[SubGoalMessage] = {
                 < goalPlans :  { goalPlan |
                 <if(goalPlan.addBeliefPlan)>
                 if(t.matchOnlyFunctorAndArity("<goalPlan.goal.atom.name>",<goalPlan.arity>)) {
                   val args: Parameters = Parameters(t.terms.toList)
                   Option(SubGoalMessage(<goalPlan.nameWithArity>, args, ref))
                 \} else <endif> }> {
                   Option.empty[SubGoalMessage]
                   }

               }

        override def create_test_message(t: StructTerm, ref: IMessageSource) (implicit executionContext: ExecutionContext): Option[SubGoalMessage] = {
                         < goalPlans :  { goalPlan |
                         <if(goalPlan.testGoalPlan)>
                         if(t.matchOnlyFunctorAndArity("<goalPlan.goal.atom.name>",<goalPlan.arity>)) {
                           val args: Parameters = Parameters(t.terms.toList)
                           Option(SubGoalMessage(<goalPlan.nameWithArity>, args, ref))
                         \} else <endif> }> {
                           Option.empty[SubGoalMessage]
                           }
                       }
         override def create_unbelief_message(t: StructTerm, ref: IMessageSource) (implicit executionContext: ExecutionContext): Option[SubGoalMessage] = {
                                  < goalPlans :  { goalPlan |
                                  <if(goalPlan.addUnBeliefPlan)>
                                  if(t.matchOnlyFunctorAndArity("<goalPlan.goal.atom.name>",<goalPlan.arity>)) {
                                    val args: Parameters = Parameters(t.terms.toList)
                                    Option(SubGoalMessage(<goalPlan.nameWithArity>, args, ref))
                                  \} else <endif> }> {
                                    Option.empty[SubGoalMessage]
                                    }
                                }



       }

>>

goal_plans(class_name,goalPlans) ::= <<

<goalPlans : { goalPlan |
     object <goalPlan.nameWithArity> extends IGoal {
       
       def execute(params: Parameters) (implicit executionContext: ExecutionContext) : Unit = {
        <goalPlan.goal.terms : { term | //var <term.name> = params.l_params(<i0>)  }; separator="\n">
        var vars = VarMap()

        vars("Self").bind_to(StringTerm(executionContext.name))
        vars("Source").bind_to(StringTerm(executionContext.src.name))
        vars("Parent").bind_to(StringTerm(executionContext.parent.name))


        <if(goalPlan.hasPreferences)>
        <if(goalPlan.hasHeadCheck)>
                        val prefs = executionContext.beliefBase.query(<goalPlan.headCheck>)

                         if (prefs.result && prefs.answer.isDefined) {
                                  params.l_params = prefs.answer.get match {
                                  case StructTerm(_,parameters) => List.from(parameters.head.ref.asInstanceOf[StructTerm].terms)
                            \}
                            \}
                        <endif>
                        <endif>


        <goalPlan.plans : { plan |




        //plan <i0> start

           <if(plan.atomic)>
           this.synchronized {
           <endif>
                vars.clear()
                vars("Self").bind_to(StringTerm(executionContext.name))
                vars("Source").bind_to(StringTerm(executionContext.src.name))
                vars("Parent").bind_to(StringTerm(executionContext.parent.name))
                <if(plan.literal.expressions)>
                <plan.literal.expressions : { term | vars +=( <if(term.term.is_var)>  "<term.term.name>" -> params.l_params(<i0>)<else>"<i0>" -> params.l_params(<i0>)<endif>)}; separator="\n ">
               <endif>

                <if(plan.hasHeadCheck)>
                val m<i0> = executionContext.beliefBase.matchTerms(<plan.headCheck>);
                if(m<i0>.result)
                {
                 m<i0>.bindings foreach { case (k, v) =>
                 //vars += (k -> v.asInstanceOf[GenericTerm])
                 if(v.is_bound) vars(k).bind_to(v)
                 else vars += ( k -> VarTerm(k) )
                 \}
               <endif>

                 <if(plan.hasContextCheck)>
                val r<i0> = executionContext.beliefBase.query(<plan.expression.asStructure>)

                if (r<i0>.result) {
                    r<i0>.bindings foreach { case (k, v) =>
                   // vars += (k -> v.asInstanceOf[GenericTerm])
                             vars(k).bind_to(v)
                    \}
                <endif>
                    plan<i0>(vars)
                    return
                 <if(plan.hasContextCheck)>
                 \}
                 <endif>

                <if(plan.hasHeadCheck)>
                 \}
                  <endif>
                 <if(plan.atomic)>
                            \}
                            <endif>
                 // plan <i0> end
                 } >

            executionContext.src.asInstanceOf[AkkaMessageSource].address() ! IntentionErrorMessage(NoApplicablePlanMessage(),AkkaMessageSource(executionContext.agent.self))

       \}


        < goalPlan.plans : { plan |
             def plan<i0>(vars: VarMap)(implicit executionContext: ExecutionContext): Unit = {

             <code_block(plan.planDefinition.steps)>

            \}
        } >

     \}

     }>
>>


code_block(steps) ::= <<
<steps : { step |
                <if(step.achieve)>
                    <step.nameWithArity>.execute(Parameters(List( <step.writableTerms : { expression | <expression.asNative> } ; separator=", "> )))
                <elseif(step.primitive)>
                    PrimitiveAction.execute(PrimitiveAction.Parameters(() => <step.call>))
                <elseif(step.for_loop)>
                    val ex_<step.iterationVarName> = executionContext.beliefBase.query( <step.query> )
                    if (ex_<step.iterationVarName>.result) {
                    if (ex_<step.iterationVarName>.bindings.contains("<step.iterationVarName>")) {
                            val it_<step.iterationVarName> : Seq[Struct] = visitTermList(ex_<step.iterationVarName>.bindings("<step.iterationVarName>"))
                            for (item_<step.iterationVarName> \<- it_<step.iterationVarName>) {
                                  vars += ("<step.varName>" -> item_<step.iterationVarName>)
                                  <code_block(step.steps)>
                            \}
                        \}
                        vars -= ("<step.varName>")
                    \}
                <elseif(step.for_loop_simple)>
                         val ex_<step.iterationVarName> = executionContext.beliefBase.bufferedQuery( <step.querySimple> )
                         while (ex_<step.iterationVarName>.hasNext) {
                             val sol_<step.iterationVarName> = ex_<step.iterationVarName>.next
                             if(sol_<step.iterationVarName>.result) {
                             vars += ("<step.varName>" -> sol_<step.iterationVarName>.bindings("<step.iterationVarName>").asInstanceOf[GenericTerm])
                             <code_block(step.steps)>
                             \}
                         \}
                     vars -= ("<step.varName>")
                <elseif(step.if_else)>
                    if((<step.ifBlock.expression.asNative>).holds) {
                        <code_block(step.ifBlock.planDefinition.steps)>
                    \}
                    <step.elseIfBlocks : { elseBlock |
                     else if((<elseBlock.expression.asNative>).holds) {
                           <code_block(elseBlock.planDefinition.steps)>
                     \}
                     }>
                     <if(step.elseBlock)>
                     else {
                        <code_block(step.elseBlock.steps)>
                     \}
                     <endif>
                <elseif(step.assign)>
                     <step.call>
                <elseif(step.belief_action)>
                     BeliefUpdateAction.execute(BeliefUpdateAction.Parameters(<step.operator>, <step.literal.asValue>),GoalParser)
                <endif>
                } >
>>

footer() ::= <<



>>

agentdef(class_name,initialGoals,initialBeliefs,goalPlans) ::= <<
 <header()>
 class <class_name>  (coms: AgentCommunicationLayer = new  DefaultCommunications,
                                     beliefBaseFactory: IBeliefBaseFactory = new StylaBeliefBaseFactory)
                      extends IntentionalAgentFactory {

 <intention(goalPlans,class_name)>
 override def agentBuilder: Agent = new Agent()
 <agent(class_name,initialGoals,initialBeliefs,goalPlans)>
 <goal_plans(class_name,goalPlans)>
 <footer()>

 }
>>