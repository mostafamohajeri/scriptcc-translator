group code;

header() ::= <<
// ====== //
// AGENT! //
// ====== //

>>

intention(goalPlans,class_name) ::= <<

>>


agent(class_name,initialGoals,initialBeliefs,goalPlans) ::= <<

< goalPlans :  { goalPlan | goal(<goalPlan.goal.atom.name>_<goalPlan.arity>). } ; separator="\n" >

< goalPlans :  { goalPlan |<\\>
 <goalPlan.plans : { plan |<\\>
<if(plan.literal.negated)>goal_plan(not_<goalPlan.goal.atom.name>_<goalPlan.arity>_<i0>,<goalPlan.goal.atom.name>_<goalPlan.arity>)<else>goal_plan(<goalPlan.goal.atom.name>_<goalPlan.arity>_<i0>,<goalPlan.goal.atom.name>_<goalPlan.arity>)<endif>
<if(plan.literal.negated)>negative_plan(not_<goalPlan.goal.atom.name>_<goalPlan.arity>_<i0>)<endif>
  }>
 }>

>>

goal_plans(class_name,goalPlans) ::= <<

<goalPlans : { goalPlan |
     object <goalPlan.goal.atom.name> extends IGoal {
        case class Parameters(l_params: List[GenericTerm]) extends IParams {\}

       def execute(params: Parameters) (implicit executionContext: ExecutionContext) : Unit = {
        <goalPlan.goal.terms : { term | //var <term.name> = params.l_params(<i0>)  }; separator="\n">
        var vars = VarMap()
        <goalPlan.plans : { plan |

        //plan <i0> start

           <if(plan.atomic)>
           this.synchronized {
           <endif>
                vars.clear()
                <if(plan.literal.expressions)>
                <plan.literal.expressions : { term | vars +=( <if(term.term.is_var)>  "<term.term.name>" -> params.l_params(<i0>)<else>"<i0>" -> params.l_params(<i0>)<endif>)}; separator="\n ">
               <endif>

                val m<i0> = executionContext.beliefBase.matchTerms(<plan.headCheck>);

               if(m<i0>.result)
                {
                m<i0>.bindings foreach { case (k, v) => vars += (k -> v.asInstanceOf[GenericTerm]) \}

                val r<i0> = executionContext.beliefBase.query(<plan.expression.st4>)

                if (r<i0>.result) {
                    r<i0>.bindings foreach { case (k, v) => vars += (k -> v.asInstanceOf[GenericTerm]) \}
                    plan<i0>(vars)
                    return
                \}

                 \}
                 <if(plan.atomic)>
                            \}
                            <endif>
                 // plan <i0>
                 } >

       \}


        < goalPlan.plans : { plan |
             def plan<i0>(vars: VarMap)(implicit executionContext: ExecutionContext): Unit = {

             <code_block(plan.planDefinition.steps)>

            \}
        } >

     \}

     }>
>>


code_block(steps) ::= <<
<steps : { step |
                <if(step.achieve)>
                    <step.writableName>.execute(<step.writableName>.Parameters(List( <step.writableTerms : { expression | <expression.native> } ; separator=", "> )))
                <elseif(step.primitive)>
                    PrimitiveAction.execute(PrimitiveAction.Parameters(() => <step.call>))
                <elseif(step.for_loop)>
                    val ex_<step.iterationVarName> = executionContext.beliefBase.query( <step.query> )
                    if (ex_<step.iterationVarName>.result) {
                    if (ex_<step.iterationVarName>.bindings.contains("<step.iterationVarName>")) {
                            val it_<step.iterationVarName> : Seq[Struct] = visitTermList(ex_<step.iterationVarName>.bindings("<step.iterationVarName>"))
                            for (item_<step.iterationVarName> \<- it_<step.iterationVarName>) {
                                  vars += ("<step.varName>" -> item_<step.iterationVarName>)
                                  <code_block(step.steps)>
                            \}
                        \}
                        vars -= ("<step.varName>")
                    \}
                <elseif(step.for_loop_simple)>
                         val ex_<step.iterationVarName> = executionContext.beliefBase.bufferedQuery( <step.querySimple> )
                         while (ex_<step.iterationVarName>.hasNext) {
                             val sol_<step.iterationVarName> = ex_<step.iterationVarName>.next
                             if(sol_<step.iterationVarName>.result) {
                             vars += ("<step.varName>" -> sol_<step.iterationVarName>.bindings("<step.iterationVarName>").asInstanceOf[GenericTerm])
                             <code_block(step.steps)>
                             \}
                         \}
                     vars -= ("<step.varName>")
                <elseif(step.if_else)>
                    if((<step.ifBlock.expression.native>).holds) {
                        <code_block(step.ifBlock.planDefinition.steps)>
                    \}
                    <step.elseIfBlocks : { elseBlock |
                     else if((<elseBlock.expression.native>).holds) {
                           <code_block(elseBlock.planDefinition.steps)>
                     \}
                     }>
                     <if(step.elseBlock)>
                     else {
                        <code_block(step.elseBlock.steps)>
                     \}
                     <endif>
                <elseif(step.assign)>
                     <step.call>
                <elseif(step.belief_action)>
                     BeliefUpdateAction.execute(BeliefUpdateAction.Parameters(<step.operator>, <step.literal.value>))
                <endif>
                } >
>>

footer() ::= <<

   def myName() (implicit executionContext: ExecutionContext) : String = executionContext.name

>>

agentdef(class_name,initialGoals,initialBeliefs,goalPlans) ::= <<
 <header()>
 // name: <class_name>
<agent(class_name,initialGoals,initialBeliefs,goalPlans)>
<goal_plans(class_name,goalPlans)>
<footer()>
 }
>>